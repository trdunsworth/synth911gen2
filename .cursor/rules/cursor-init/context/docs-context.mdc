---
description: 
globs: 
alwaysApply: true
---
# Documentation Framework Context

When the user asks about documentation, available commands, or the cursor-init framework, I should provide context about:

**Available Slash Commands:**
- `/init-docs` - Scaffold initial project documentation
- `/update-docs` - Update existing documentation to reflect code changes  
- `/adr "Title"` - Create new Architecture Decision Record
- `/gen-er-diagram` - Generate ER diagram from SQLAlchemy models
- `/gen-arch-diagram` - Generate system architecture diagram
- `/check-docs` - Validate documentation freshness
- `/list-templates` - List all available documentation templates
- `/sync-docs` - Sync all documentation with current codebase
- `/sync-doc [name]` - Sync specific documentation file
- `/sync-category [category]` - Sync documents in specific category

**Documentation Types:**
- **Architecture Overview**: System design and component relationships
- **ADRs**: Architecture Decision Records with context and consequences
- **Onboarding Guides**: Project setup and contributor onboarding
- **ER Diagrams**: Database schema visualization using Mermaid
- **Component Diagrams**: System architecture and module relationships

**Framework Features:**
- Template-based generation with multiple variants per document type
- Custom template support via `.cursor-init.yaml` configuration
- Default templates available in `.cursor/templates/` directory
- Mermaid diagram integration for version-controlled visuals
- Language/framework agnostic
- Zero-installation setup via Cursor rules and templates

**Template System:**
- **Default Templates**: Located in `.cursor/templates/[type]/` with template variants
- **Custom Templates**: Configure custom paths in `.cursor-init.yaml` under `templates.custom_template_paths`
- **Template Selection**: Choose variants via `templates.[type]` configuration (e.g., `templates.rfc: "detailed"`)
- **Placeholder System**: Templates use `{{PLACEHOLDER}}` syntax for dynamic content replacement

**Philosophy:**
- Documentation as code - stored in version control alongside source
- Living documentation that stays in sync with codebase changes
- Industry best practices from Google, ThoughtWorks, Microsoft
- Seamless integration within Cursor IDE workflow
