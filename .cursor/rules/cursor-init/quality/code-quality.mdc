---
description: 
globs: 
alwaysApply: true
---
# General Code Quality Guidelines

## Critical Rules

- Adhere to the **DRY (Don't Repeat Yourself)** principle: avoid duplication of code and knowledge.
- Apply **SOLID principles** (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion) in your design.
- Write code that is **readable and maintainable**, prioritizing clarity over cleverness.
- Add comments to explain *why* complex decisions were made, not *what* the code does (unless the code is non-obvious).
- Ensure all public APIs and complex functions have clear, concise documentation (e.g., docstrings, JSDoc).
- Manage complexity by breaking down large functions or modules into smaller, focused units.
- **Write unit tests for all critical business logic and complex functions.**
- **Design code to be easily testable by minimizing dependencies and using dependency injection or clear interfaces.**
- **Ensure tests are isolated, repeatable, and fast.**
- **Prioritize testing edge cases and error scenarios.**

## Examples

<example>
// Valid: DRY principle, clear function name
function calculateTotal(items) {
  return items.reduce((sum, item) => sum + item.price * item.quantity, 0);
}

// Valid: Explanatory comment for a complex regex
const emailRegex = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/; // Regex to validate email format (RFC 5322 compliant)

// Valid: Easily testable function with clear input/output
function isValidEmail(email) {
  return emailRegex.test(email);
}

// Valid: Unit test for isValidEmail
// import { isValidEmail } from './email-validator';
// test('isValidEmail returns true for valid emails', () => {
//   expect(isValidEmail('test@example.com')).toBe(true);
// });
// test('isValidEmail returns false for invalid emails', () => {
//   expect(isValidEmail('invalid-email')).toBe(false);
// });
</example>

<example type="invalid";>
// Invalid: Code duplication
function calculateOrderTotal(orderItems) {
  let total = 0;
  for (const item of orderItems) {
    total += item.price * item.quantity;
  }
  return total;
}

function calculateInvoiceTotal(invoiceItems) {
  let total = 0;
  for (const item of invoiceItems) {
    total += item.price * item.quantity;
  }
  return total;
}

// Invalid: Function with hidden dependencies, hard to test
// function saveUser(user) {
//   // This function directly interacts with a global database connection or external service
//   // Making it hard to mock or test in isolation.
//   globalDatabase.save(user);
// }
</example>