---
description: When the user types `/init-docs` to scaffold initial project documentation structure
globs: 
alwaysApply: false
---
# Initialize Documentation

I will initialize project documentation by creating essential documentation files based on your configuration.

1. **Read Configuration:** I will first check for `.cursor-init.yaml` to understand which documentation types are explicitly disabled.

2. **Framework Detection:** I will use codebase search to detect the project's technology stack and determine which documentation types are relevant:
   - **Core Documentation** (always relevant): architecture, onboarding, adr
   - **Onboarding Documentation** (always relevant): project explanation, first steps, setup 
   - **Data Documentation** (if database models found): data_model, database_ops, data_security
   - **Infrastructure Documentation** (if deployment configs found): deployment, dependencies, security
   - **Development Documentation** (if collaborative project detected): rfc, contributing, api_docs

3. **Filter by Configuration:** I will check which relevant documentation types are explicitly disabled and skip those.

4. **Check Existing Files:** I will check for the existence of relevant documentation files (unless disabled):
   - `docs/architecture.md` (unless `documentation.core.architecture: false`)
   - `docs/adr/0001-record-architecture-decisions.md` (unless `documentation.core.adr: false`)
   - `docs/onboarding.md` (unless `documentation.core.onboarding: false`)
   - `docs/data-model.md` (if models detected, unless `documentation.data.data_model: false`)
   - Additional files based on project analysis

5. **Create Documentation Structure:** I will create the `docs/` directory and required subdirectories if they don't exist.

6. **Load Templates:** For each relevant documentation type (not disabled), I will read the appropriate template file from `.cursor/templates/` or use custom template paths if configured.

7. **Generate Documentation Files:** For each missing file that is relevant to the project and not disabled, I will create it using the loaded template with appropriate placeholder replacements.

**Configuration Handling (Opt-Out Behavior):**
- If `.cursor-init.yaml` doesn't exist, I will generate all relevant documentation based on project analysis
- Documentation is generated by default if relevant to the project
- Only explicitly disabled types (`false` in config) will be skipped
- AI determines relevance, configuration only disables

If any of these files already exist, I will ask for your confirmation before overwriting them.

Let me start by reading your configuration and checking what documentation files already exist...

I will use the `read_file` tool to check `.cursor-init.yaml` configuration first, then `list_dir` to check existing files and `edit_file` to create the documentation structure according to your enabled settings.
