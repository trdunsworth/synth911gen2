---
description: When the user types `/sync-docs` to synchronize all documentation with current codebase
globs: 
alwaysApply: false
---
# Sync Documentation

I will sync all relevant documentation files with the current codebase state, generating documentation based on project analysis unless explicitly disabled in your configuration.

**Initiating full documentation synchronization. This may take a moment...**

    I will:
  1. **Read Configuration:** Check `.cursor-init.yaml` to understand which documentation types are explicitly disabled
  2. **Analyze Current Codebase:** Detect languages, frameworks, and project structure using codebase search
  3. **Determine Relevant Documentation:** Based on project analysis, identify which documentation types are relevant:
     - Core: architecture, onboarding, adr (always relevant)
     - Data: data_model, database_ops, data_security (if database/models detected)
     - Infrastructure: deployment, dependencies, security (if deployment configs detected)
     - Development: rfc, contributing, api_docs (if collaborative development detected)
  4. **Filter by Configuration:** Skip any relevant documentation types that are explicitly disabled (`false` in config)
  5. **Check Documentation Status:** Compare existing relevant docs with current code state
  6. **Load Templates:** For each relevant documentation type (not disabled), load the appropriate template:
     - Read from custom template paths if configured in `templates.custom_template_paths`
     - Fall back to default templates in `.cursor/templates/[type]/`
     - Use template variant specified in `templates.[type]` configuration
  7. **Update Relevant Files:** Create/update documentation files that are relevant to the project and not disabled
  8. **Replace Placeholders:** For each document, replace template placeholders with current project information
  9. **Refresh Diagrams:** Update ER diagrams from database models unless data_model is disabled
  10. **Sync Content:** Ensure documentation reflects current project configuration and relevant features

  Let me run the synchronization process...

  I will use the `read_file` tool to check configuration first, then `codebase_search`, `list_dir`, and `edit_file` tools to analyze the current project state, detect what documentation is relevant to the project, and apply necessary changes to keep all relevant documentation (unless disabled) in sync with the codebase.
